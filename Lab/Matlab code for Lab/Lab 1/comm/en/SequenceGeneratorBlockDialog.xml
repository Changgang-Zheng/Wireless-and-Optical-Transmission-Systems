<?xml version="1.0"?>
<!-- Copyright 2015 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="comm">
  <message>
      <entry key="PNSeqGen_MaskDesc">Generate a pseudorandom noise (PN) sequence using a linear feedback shift register (LFSR). The LFSR is implemented using a simple shift register generator (SSRG, or Fibonacci) configuration.\n\nThe ''Generator polynomial'' parameter values specify the shift register connections. Enter these values as either a binary vector or a descending-ordered polynomial. For the binary vector representation, the first and last elements of the vector must be 1. For the descending-ordered polynomial representation, the last element of the vector must be 0.\n\nThe 'Output mask source' may be from a dialog parameter or an input port. The ''Output mask vector'' is a binary vector corresponding to the shift register states that are to be XORed to produce the output sequence values. Alternatively, you may enter an integer 'scalar shift value' to produce an equivalent advance or delay in the output sequence.\n\nFor variable-size output signals, the current output size is either specified from the ''oSiz'' input or inherited from the 'Ref' input.</entry>
      <entry key="GoldSeqGen_MaskDesc">Generate a Gold sequence from a set of sequences by specifying a preferred pair of polynomials.\n\nThe polynomial parameter values represent the shift register connections. Enter these values as either a binary vector or a descending ordered polynomial to indicate the connection points.\n\nThe sequence index parameter denotes the single sequence outputted from the set of Gold sequences. Specify it as a scalar integer in the range [-2, 2^n-2] where n is the degree of the generator polynomial. The index values -2 and -1 correspond to the first and second PN sequences as generated by the preferred polynomials (1) and (2), respectively.\n\nFor variable-size output signals, the current output size is either specified from the ''oSiz'' input or inherited from the ''Ref'' input.</entry>
      <entry key="KasamiSeqGen_MaskDesc">Generate a Kasami sequence from the set of Kasami sequences by specifying the generator polynomial.\n\nThe generator polynomial parameter value represents the shift register connections. Enter these values as either a binary vector or a descending ordered polynomial to indicate the connection points.\n\nThe sequence index parameter denotes the single sequence outputted from the set of Kasami sequences. Specify it as a 2-element integer vector for the Large set of sequences or as a scalar integer for the Small set of sequences.\n\nFor variable-size output signals, the current output size is either specified from the ''oSiz'' input or inherited from the ''Ref'' input.</entry>
      <entry key="HadamardCodeGen_MaskDesc">Generate a Hadamard Code from an orthogonal set of codes.\n\nThe code index parameter is an integer scalar in the range [0, N-1] where N is the code length.  When incremented by 1, it corresponds to the row index of a Hadamard matrix of size N x N. N must be an integer power of 2.\n\nThe output code is in a bipolar format with a '{'0, 1'}' to '{'1, -1'}' element mapping.</entry>
      <entry key="WalshCodeGen_MaskDesc">Generate a Walsh Code from an orthogonal set of codes.\n\nThe code index parameter is a scalar in the range [0, N-1] where N is the code length.  It corresponds to the number of zero crossings in an output code of length N. N must be an integer power of 2.\n\nThe output code is in a bipolar format with a '{'0, 1'}' to '{'1, -1'}' element mapping.</entry>
      <entry key="OVSFCodeGen_MaskDesc">Generate an Orthogonal Variable Spreading Factor (OVSF) Code from a set of orthogonal codes.\n\nThe code index parameter is an integer scalar in the range [0, N-1] where N is the spreading factor.  It corresponds to the bit-flipped row index of a Hadamard matrix of size N x N, when that is incremented by 1. N must be an integer power of 2.\n\nThe output code is in a bipolar format with a '{'0,1'}' to '{'1, -1'}' element mapping.</entry>
      <entry key="BarkerCodeGen_MaskDesc">Generate a Barker Code of the specified length.\n\nThe output code is in a bipolar format with a '{'0, 1'}' to '{'1, -1'}' element mapping.</entry>
      <entry key="GenPoly_MP">Generator polynomial:</entry>
      <entry key="PreferredPoly1_MP">Preferred polynomial (1):</entry>
      <entry key="PreferredPoly2_MP">Preferred polynomial (2):</entry>
      <entry key="InitialStates_MP">Initial states:</entry>
      <entry key="InitialStates1_MP">Initial states (1):</entry>
      <entry key="InitialStates2_MP">Initial states (2):</entry>
      <entry key="SequenceIndex_MP">Sequence index:</entry>
      <entry key="SequenceIndices_MP">Sequence index(es):</entry>
      <entry key="OutMaskSrc_MP">Output mask source:</entry>
      <entry key="OutMaskVec_MP">Output mask vector (or scalar shift value):</entry>
      <entry key="Shift_MP">Shift:</entry>
      <entry key="OutVarSizeSig_MP">Output variable-size signals</entry>
      <entry key="MaxOutSizeSrc_MP">Maximum output size source:</entry>
      <entry key="MaxOutSize_MP">Maximum output size:</entry>
      <entry key="CurrMaxOutSizeModeDialogTextLabel_MP">Current output size mode: Specify from input port</entry>
      <entry key="CurrMaxOutSizeModeRefTextLabel_MP">Current output size mode: Inherit from input port</entry>
      <entry key="SampleTime_MP">Sample time:</entry>
      <entry key="FrameBasedOutput_MP">Frame-based outputs</entry>
      <entry key="SamplesPerFrame_MP">Samples per frame:</entry>
      <entry key="RstNNZInput_MP">Reset on nonzero input</entry>
      <entry key="EnableBitPackedOutput_MP">Enable bit-packed outputs</entry>
      <entry key="NumberPackedBit_MP">Number of packed bits:</entry>
      <entry key="InterpBitPackedVal_MP">Interpret bit-packed values as signed</entry>
      <entry key="CodeLen_MP">Code length:</entry>
      <entry key="CodeIndex_MP">Code index:</entry>
      <entry key="SpreadingFactor_MP">Spreading factor:</entry>

  </message>
</rsccat>